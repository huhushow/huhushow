<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Huhushow's Blog</title><link href="https://huhushow.github.io/huhushow/" rel="alternate"></link><link href="https://huhushow.github.io/huhushow/feeds/all.atom.xml" rel="self"></link><id>https://huhushow.github.io/huhushow/</id><updated>2017-05-28T18:00:00-04:00</updated><entry><title>MySQL load data infile 문 사용하기</title><link href="https://huhushow.github.io/huhushow/mysql-load-data-infile.html" rel="alternate"></link><published>2017-05-28T18:00:00-04:00</published><updated>2017-05-28T18:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2017-05-28:/huhushow/mysql-load-data-infile.html</id><summary type="html">&lt;h3&gt;LOAD DATA INFILE 문이란?&lt;/h3&gt;
&lt;p&gt;텍스트 파일을 읽어서 테이블로 데이터를 입력하는 명령어이다. 한번에 많은 데이터를 입력해야 할 때 주로 쓰인다. 간단한 구문이지만 파일 형식애 대한 정보를 입력해줘야 한다. 구문의 간단한 구조는 아래와 같다 자세한 정보는 &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/load-data.html"&gt;MySQL Document&lt;/a&gt; 를 참조하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LOAD DATA INFILE &amp;#39;file_name&amp;#39;  -- 입력할 파일의 경로
INTO TABLE tbl_name  -- 입력받을 테이블의 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;LOAD DATA INFILE 문이란?&lt;/h3&gt;
&lt;p&gt;텍스트 파일을 읽어서 테이블로 데이터를 입력하는 명령어이다. 한번에 많은 데이터를 입력해야 할 때 주로 쓰인다. 간단한 구문이지만 파일 형식애 대한 정보를 입력해줘야 한다. 구문의 간단한 구조는 아래와 같다 자세한 정보는 &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/load-data.html"&gt;MySQL Document&lt;/a&gt; 를 참조하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LOAD DATA INFILE &amp;#39;file_name&amp;#39;  -- 입력할 파일의 경로
INTO TABLE tbl_name  -- 입력받을 테이블의 이름
FIELDS  -- 라인 내의 필드들을 구분하는 방법
    TERMINATED BY &amp;#39;,&amp;#39;  -- 각 필드가 끝나는 구분문자를 지정해줌
    ENCLOSED BY &amp;#39;&amp;quot;&amp;#39;  -- 구분뒨 필드 내에서 시작/끝 을 알리는 문자를 지정해줌
LINES  -- 각 라인을 구분하는 방법
    TERMINATED BY &amp;#39;\n&amp;#39;  -- 각 라인이 끝나는 구분문자를 지정해줌
IGNORE 1 LINES  -- 처리하지 않을 라인을 지정해줌
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;테스트&lt;/h3&gt;
&lt;p&gt;간단한 테스트를 위해 테스트 테이블을 만들어서 실제로 값을 입력해보자. 아래의 쿼리를 사용하여 테이블을 생성하였다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE `ldi_test`(  
`id` INT NOT NULL,
`char_col` VARCHAR(50) NOT NULL,
`int_col` INT NOT NULL,
PRIMARY KEY (`id`)
) ENGINE=INNODB CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;


INSERT INTO ldi_test VALUES(1, &amp;#39;a&amp;#39;, 1);
INSERT INTO ldi_test VALUES(2, &amp;#39;b&amp;#39;, 2);
INSERT INTO ldi_test VALUES(3, &amp;#39;c&amp;#39;, 3);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;실행 후 테이블에는 다음과 같은 데이터가 입력되어 있다.&lt;br&gt;
&lt;img alt="default data" src="https://huhushow.github.io/huhushow/images/ldi2.PNG"&gt;  &lt;/p&gt;</content></entry><entry><title>번역 테스트</title><link href="https://huhushow.github.io/huhushow/translate-test.html" rel="alternate"></link><published>2017-05-28T14:00:00-04:00</published><updated>2017-05-28T14:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2017-05-28:/huhushow/translate-test.html</id><summary type="html">&lt;p&gt;이것은 번역 테스트 입니다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;이것은 번역 테스트 입니다.&lt;/p&gt;</content></entry><entry><title>translate test</title><link href="https://huhushow.github.io/huhushow/translate-test-en.html" rel="alternate"></link><published>2017-05-28T14:00:00-04:00</published><updated>2017-05-28T14:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2017-05-28:/huhushow/translate-test-en.html</id><summary type="html">&lt;p&gt;This is stanslate test.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is stanslate test.&lt;/p&gt;</content></entry><entry><title>language version manager vs docker</title><link href="https://huhushow.github.io/huhushow/language-version-manager-vs-docker.html" rel="alternate"></link><published>2017-01-17T15:00:00-05:00</published><updated>2017-01-17T15:00:00-05:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2017-01-17:/huhushow/language-version-manager-vs-docker.html</id><summary type="html">&lt;p&gt;소프트웨어 산업이 발전함에 따라 수많은 소프트웨어들이 등장하였다. 그에 따라 이러한 많은 소프트웨어들을 재사용 혹은 조합하여 소프트웨어를 개발하는 일이 보편화 되었다. 점점 더 많은 라이브러리, 패키지 들이 등장하게 되었고 이들 또한 또다른 프로그램들과 복잡한 의존 관계를 갖게 되었다. 떄문에 이러한 복잡한 의존 관계를 관리하는 패키지 관리 도구, 각각의 프로그램의 의존 관계가 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;소프트웨어 산업이 발전함에 따라 수많은 소프트웨어들이 등장하였다. 그에 따라 이러한 많은 소프트웨어들을 재사용 혹은 조합하여 소프트웨어를 개발하는 일이 보편화 되었다. 점점 더 많은 라이브러리, 패키지 들이 등장하게 되었고 이들 또한 또다른 프로그램들과 복잡한 의존 관계를 갖게 되었다. 떄문에 이러한 복잡한 의존 관계를 관리하는 패키지 관리 도구, 각각의 프로그램의 의존 관계가 서로 충돌하는것을 방지하기 위한 실행 환경 격리 도구 등이 개발되어 사용되기 시작하였다. OS의 패키지를 관리해주는 YUM, APT 프로그래밍 언어의 패키지를 관리해주는 PIP, NPM 프로그래밍 언어의 버전을 관리해주는 pyenv, nvm 등의 프로그램들이다.
이와는 별개로 최근 여러 이유로 OS의 실행환경을 격리하여 독립된 실행환경을 구성하는 기술들이 빠르게 발전하고 있는데 가장 대표적인 것이 Docker 이다.
위의 도구들과 Docker의 용도가 서로 동일한것은 아니지만 일정 부분 겹쳐지는 면도 있다. &lt;/p&gt;
&lt;p&gt;소프트웨어 개발 산업이 발전함 -&amp;gt; 수많은 공개된 패키지들을 재사용해 소프트웨어를 개발하는 일이 보편화됨. -&amp;gt; 사용하는 각종 패키지, 라이브러리 심지어 언어 구현체 버전에 대한 관리가 필요해짐 -&amp;gt; pip, npm 등의 패키지 매니저와 pyenv, nvm 등의 언어 버전 메니저 등의 프로그램이 등장 -&amp;gt; 도커의 등장 -&amp;gt; 동일 머신 내에서 여러 프로그램 실행을 위해 각각의 격리된 실행환경을 구성하는 방법의 선택지가 두가지가 됨&lt;/p&gt;</content></entry><entry><title>Docker hello world</title><link href="https://huhushow.github.io/huhushow/docker-hello-world.html" rel="alternate"></link><published>2016-10-18T22:00:00-04:00</published><updated>2016-10-18T22:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-10-18:/huhushow/docker-hello-world.html</id><summary type="html">&lt;h3&gt;What is docker?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Container software&lt;/li&gt;
&lt;li&gt;Docker provides linux-based isolated environment&lt;/li&gt;
&lt;li&gt;Docker engine runs docker image&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why docker better than VM?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker is more efficient for delivery cause that's hierarchical image structure.&lt;/li&gt;
&lt;li&gt;Docker can control version and history by default.&lt;/li&gt;
&lt;li&gt;Docker can management and share image by repository like docker hub …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;What is docker?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Container software&lt;/li&gt;
&lt;li&gt;Docker provides linux-based isolated environment&lt;/li&gt;
&lt;li&gt;Docker engine runs docker image&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why docker better than VM?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker is more efficient for delivery cause that's hierarchical image structure.&lt;/li&gt;
&lt;li&gt;Docker can control version and history by default.&lt;/li&gt;
&lt;li&gt;Docker can management and share image by repository like docker hub.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to run docker?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;search image
  &lt;code&gt;docker search $keyword&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;download or create image&lt;/li&gt;
&lt;li&gt;download
    &lt;code&gt;docker pull $image:$tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create
    &lt;code&gt;# make base image
    docker import $basetar $imge:$tag
    # make image
    docker build --tag $image:$tag $dockerfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;run image
    &lt;code&gt;docker run -i -t --name $container $image:$tag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>VirtualBox 윈도우 서비스로 실행하기</title><link href="https://huhushow.github.io/huhushow/virtualbox-windou-seobiseuro-silhaenghagi.html" rel="alternate"></link><published>2016-10-18T22:00:00-04:00</published><updated>2016-10-18T22:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-10-18:/huhushow/virtualbox-windou-seobiseuro-silhaenghagi.html</id><summary type="html">&lt;p&gt;윈도우에서 개발을 위해 &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;를 사용할 경우 부팅할때마다 VM을 수동으로 실행시키긴 귀찮기 때문에 많은 사람들이 이를 자동으로 수행해주는 스크립트 등을 사용하곤 한다. 나도 처음에는 직접 작성하였지만 &lt;a href="http://vboxvmservice.sourceforge.net/"&gt;VBoxVmService&lt;/a&gt;라는 편한 프로그램을 발견한 후에는 그냥 이녀석을 사용하고 있다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;윈도우에서 개발을 위해 &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;를 사용할 경우 부팅할때마다 VM을 수동으로 실행시키긴 귀찮기 때문에 많은 사람들이 이를 자동으로 수행해주는 스크립트 등을 사용하곤 한다. 나도 처음에는 직접 작성하였지만 &lt;a href="http://vboxvmservice.sourceforge.net/"&gt;VBoxVmService&lt;/a&gt;라는 편한 프로그램을 발견한 후에는 그냥 이녀석을 사용하고 있다.&lt;/p&gt;</content></entry><entry><title>Bash keyboard shortcut</title><link href="https://huhushow.github.io/huhushow/bash-keyboard-shortcut.html" rel="alternate"></link><published>2016-10-18T17:00:00-04:00</published><updated>2016-10-18T17:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-10-18:/huhushow/bash-keyboard-shortcut.html</id><summary type="html">&lt;p&gt;from &lt;a href="http://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/"&gt;howtogeek.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ctrl + A
Go to the beginning of the line you are currently typing on&lt;/p&gt;
&lt;p&gt;Ctrl + E
Go to the End of the line you are currently typing on&lt;/p&gt;
&lt;p&gt;Ctrl + L              
CLears the Screen, similar to the clear command&lt;/p&gt;
&lt;p&gt;Ctrl + U
Clears the line before the cursor position …&lt;/p&gt;</summary><content type="html">&lt;p&gt;from &lt;a href="http://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/"&gt;howtogeek.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ctrl + A
Go to the beginning of the line you are currently typing on&lt;/p&gt;
&lt;p&gt;Ctrl + E
Go to the End of the line you are currently typing on&lt;/p&gt;
&lt;p&gt;Ctrl + L              
CLears the Screen, similar to the clear command&lt;/p&gt;
&lt;p&gt;Ctrl + U
Clears the line before the cursor position. If you are at the end of the line, clears the entire line.&lt;/p&gt;
&lt;p&gt;Ctrl + H
Same as backspace&lt;/p&gt;
&lt;p&gt;Ctrl + R
Let’s you seaRch through previously used commands&lt;/p&gt;
&lt;p&gt;Ctrl + C
Kill whatever you are running&lt;/p&gt;
&lt;p&gt;Ctrl + D
Exit the current shell&lt;/p&gt;
&lt;p&gt;Ctrl + Z
Puts whatever you are running into a suspended background process. fg restores it.&lt;/p&gt;
&lt;p&gt;Ctrl + W
Delete the Word before the cursor&lt;/p&gt;
&lt;p&gt;Ctrl + K
Clear the line after the cursor&lt;/p&gt;
&lt;p&gt;Ctrl + T
Swap the last Two characters before the cursor&lt;/p&gt;
&lt;p&gt;Alt + F
Move cursor Forward one word on the current line&lt;/p&gt;
&lt;p&gt;Alt + B
Move cursor Backward one word on the current line&lt;/p&gt;
&lt;p&gt;Tab
Auto-complete files and folder names&lt;/p&gt;</content></entry><entry><title>블로그 개시 자동화 하기</title><link href="https://huhushow.github.io/huhushow/beulrogeu-gaesi-jadonghwa-hagi.html" rel="alternate"></link><published>2016-10-12T22:00:00-04:00</published><updated>2016-10-12T22:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-10-12:/huhushow/beulrogeu-gaesi-jadonghwa-hagi.html</id><summary type="html">&lt;p&gt;Github pages에 글을 등록하기 위해서는 일반적으로 Jekyll 같은 정적 사이트 제작기를
사용한다. 나는 Python이 익숙하기 때문에 &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; 을 사용하여 글을 쓰고 있다. 때문에 일반적인 블로그에서는 찾아보기 힘든 문제가 발생한다.&lt;/p&gt;
&lt;p&gt;Pelican을 사용하기 위한 패키지들 중 일부가 윈도우 환경에서는 정상적으로 작동하지 않는 것이다. 이런 경우 선호하는 방법인 'VM 생성 후 리눅스 설치 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Github pages에 글을 등록하기 위해서는 일반적으로 Jekyll 같은 정적 사이트 제작기를
사용한다. 나는 Python이 익숙하기 때문에 &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; 을 사용하여 글을 쓰고 있다. 때문에 일반적인 블로그에서는 찾아보기 힘든 문제가 발생한다.&lt;/p&gt;
&lt;p&gt;Pelican을 사용하기 위한 패키지들 중 일부가 윈도우 환경에서는 정상적으로 작동하지 않는 것이다. 이런 경우 선호하는 방법인 'VM 생성 후 리눅스 설치 -&amp;gt; 윈도우 에디터의 FTP 편집 기능으로 문서 편집' 의 방법으로 글을 쓰고 있다.&lt;/p&gt;
&lt;p&gt;이럴 경우 매번 원격으로 리눅스 VM에 접속해 github에 푸시를 해줘야 하기 때문에 이를 윈도우에서 자동화 할 방법을 찾아봤다. 두가지 방법이 떠올랐는데 리눅스에서 해당 디렉토리의 변경사항을 감지해 푸시 시켜주거나 푸시 스크립트를 작성해 원도우에서 실행시켜주는 것이다. 후자의 경우 윈도우가 아니라면 간단한 ssh 명령어로 쉽게 처리 가능했겠지만, 윈도우 cmd에서는 ssh 접속이 안되기 때문에 절차가 조금 복잡해진다. 대강 아래와 같은 방법으로 처리하게 되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;powershell 설치&lt;/li&gt;
&lt;li&gt;Posh-SSH 모듈 설치&lt;/li&gt;
&lt;li&gt;SSH 명령 실행 스크립트에서 사용할 암호화된 리눅스 비밀번호 파일 생성&lt;ul&gt;
&lt;li&gt;Read-Host -AsSecureString | ConvertFrom-SecureString | Out-File $passwd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH 명령을 실행하는 스크립트 파일 작성&lt;ul&gt;
&lt;li&gt;PSCredential 객체 생성&lt;ul&gt;
&lt;li&gt;$SSHCredential=New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, (Get-Content $passwd | ConvertTo-SecureString)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH 세션 생성&lt;ul&gt;
&lt;li&gt;$SessionInfo = New-SSHSession -ComputerName $SSHhost -Credential ($SSHCredential)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH 명령어 실행&lt;ul&gt;
&lt;li&gt;Invoke-SSHCommand -Index $SessionInfo.SessionId -Command "make github"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH 세션 종료&lt;ul&gt;
&lt;li&gt;Remove-SSHSession -Index $SessionInfo.SessionId&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;atom에서 markdown 저장 시 위의 스크립트 실행&lt;ul&gt;
&lt;li&gt;atom-shell-commands 패키지로 단축키 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>첫 한글 블로그</title><link href="https://huhushow.github.io/huhushow/ceos-hangeul-beulrogeu.html" rel="alternate"></link><published>2016-10-10T15:00:00-04:00</published><updated>2016-10-10T15:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-10-10:/huhushow/ceos-hangeul-beulrogeu.html</id><summary type="html">&lt;p&gt;한글 문서는 잘 작성되는지 테스트 해보는 중.
ATOM을 설치해서 remote ftp로 글을 작성해 보고 있음. markdown preview는 작동하지 않공 있음. 일단은 잘 올라가는지 보고싶다.
약간의 에러는 있지만 일단 올라가는건 성공.
atom 대신 vscode 쓰는중3.&lt;/p&gt;</summary><content type="html">&lt;p&gt;한글 문서는 잘 작성되는지 테스트 해보는 중.
ATOM을 설치해서 remote ftp로 글을 작성해 보고 있음. markdown preview는 작동하지 않공 있음. 일단은 잘 올라가는지 보고싶다.
약간의 에러는 있지만 일단 올라가는건 성공.
atom 대신 vscode 쓰는중3.&lt;/p&gt;</content></entry><entry><title>My Second Github Pages Blog</title><link href="https://huhushow.github.io/huhushow/my-second-github-pages-blog.html" rel="alternate"></link><published>2016-10-04T17:00:00-04:00</published><updated>2016-10-04T17:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-10-04:/huhushow/my-second-github-pages-blog.html</id><summary type="html">&lt;p&gt;ghp-import is not work well. that cause .git error. because I fix Makefile for pushing to github
This is my second blog for testing git push script.&lt;/p&gt;</summary><content type="html">&lt;p&gt;ghp-import is not work well. that cause .git error. because I fix Makefile for pushing to github
This is my second blog for testing git push script.&lt;/p&gt;</content></entry><entry><title>My First Github Pages Blog</title><link href="https://huhushow.github.io/huhushow/my-first-github-pages-blog.html" rel="alternate"></link><published>2016-10-03T21:00:00-04:00</published><updated>2016-10-03T21:00:00-04:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-10-03:/huhushow/my-first-github-pages-blog.html</id><summary type="html">&lt;p&gt;This is my first blog posting on github pages by python pelican.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is my first blog posting on github pages by python pelican.&lt;/p&gt;</content></entry><entry><title>Using commend line parameter in ansible_playbook</title><link href="https://huhushow.github.io/huhushow/using-commend-line-parameter-in-ansible_playbook.html" rel="alternate"></link><published>2016-02-25T12:30:00-05:00</published><updated>2016-02-25T12:30:00-05:00</updated><author><name>huhushow@gmail.com</name></author><id>tag:huhushow.github.io,2016-02-25:/huhushow/using-commend-line-parameter-in-ansible_playbook.html</id><summary type="html">&lt;p&gt;예전에 만든 ansible 배포 스크립트는 소스를 FTP로 받아오는 방식이었다. 그러다보니 버전별 배포가 복잡해져서 타겟 소스를 Git을 통해 받아오는 방식으로 바꿨다. Git clone 하는거야 ansible에 git 모듈을 이용하면 간단하다. 특정 tag등을 지정하기 위해서 커맨드라인 변수를 받아오는것도 간단한데 유용할듯 해서 남겨본다.&lt;/p&gt;
&lt;script src="https://gist.github.com/huhushow/639a417cf2b5bb33b783.js"&gt;&lt;/script&gt;

&lt;p&gt;변수의 경우 jinja2 탬플릿 문법을 사용하는데 필터를 사용해서 변수에 대한 여러 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;예전에 만든 ansible 배포 스크립트는 소스를 FTP로 받아오는 방식이었다. 그러다보니 버전별 배포가 복잡해져서 타겟 소스를 Git을 통해 받아오는 방식으로 바꿨다. Git clone 하는거야 ansible에 git 모듈을 이용하면 간단하다. 특정 tag등을 지정하기 위해서 커맨드라인 변수를 받아오는것도 간단한데 유용할듯 해서 남겨본다.&lt;/p&gt;
&lt;script src="https://gist.github.com/huhushow/639a417cf2b5bb33b783.js"&gt;&lt;/script&gt;

&lt;p&gt;변수의 경우 jinja2 탬플릿 문법을 사용하는데 필터를 사용해서 변수에 대한 여러 처리를 해줄 수 있다. "{{ ver | default('develop') }}" 의 경우 ver 이라는 버전에 대한 변수가 없을 경우 기본값으로 develop 브런치를 가져오록 한 것이다. 변수를 문자열로 처리했는데 이는 YAML syntax의 dictionary 표현법인 { 떄문이다. 이렇게 플레이북을 작성했다면 다음과같이 실행시킬 수 있다.&lt;/p&gt;
&lt;script src="https://gist.github.com/huhushow/b5f5d6c7445025b90a6e.js"&gt;&lt;/script&gt;

&lt;p&gt;간단한 키-값 형식 또는&amp;nbsp;JSON 형식을 사용할 수 있다. json 형식으로 저장된 파일을 읽어올수도 있는데 그럴 경우 @ 마크로 파일임을 표시한다.&lt;/p&gt;</content></entry></feed>